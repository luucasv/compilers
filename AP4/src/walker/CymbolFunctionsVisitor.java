package walker;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import autogenerated.CymbolBaseVisitor;
import autogenerated.CymbolParser;

public class CymbolFunctionsVisitor extends CymbolBaseVisitor<FunctionManager> {
  @Override
  public FunctionManager visitFuncDecl(CymbolParser.FuncDeclContext ctx) {
    String functionName = ctx.ID().getText();
    List<String> paramList = new LinkedList<String>();

    // add param list to functionNameBuffer
    if(ctx.paramTypeList() != null) {
	    for (CymbolParser.ParamTypeContext param : ctx.paramTypeList().paramType()) {
	      paramList.add(Type.convert(param.type().getText()));
	    }
    }

    // declared function type
    String returnTypeName = Type.convert(ctx.type().getText());
    
    // visit function block: 
    FunctionManager result = ctx.block().accept(this);
		
		if (result == null) {
			result = new FunctionManager();
    }

    // adding signature
		result.add(new Function(functionName, paramList, returnTypeName));
    return result;
	}
	
  @Override
	protected FunctionManager aggregateResult(FunctionManager aggregate, FunctionManager nextResult) {
		if (aggregate == null) {
      return nextResult;
    } else if (nextResult == null) {
    	return aggregate;
    } else {
      FunctionManager result = aggregate;
      result.aggregate(nextResult);
      return result;
    }
	}
}